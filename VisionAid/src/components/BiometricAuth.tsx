import React, { useEffect, useState } from 'react';
import { View, Text, TouchableOpacity, StyleSheet, SafeAreaView, Alert } from 'react-native';
import * as LocalAuthentication from 'expo-local-authentication';
import { voiceService } from '../services/VoiceServiceAudio';
import { gestureService, GestureType } from '../services/GestureService';
import { PanGestureHandler } from 'react-native-gesture-handler';

interface BiometricAuthProps {
  onAuthSuccess: () => void;
  onAuthFail?: () => void;
}

export const BiometricAuth: React.FC<BiometricAuthProps> = ({ 
  onAuthSuccess, 
  onAuthFail 
}) => {
  const [isAuthenticating, setIsAuthenticating] = useState(false);
  const [biometricType, setBiometricType] = useState<string>('');
  const [isSupported, setIsSupported] = useState(false);

  useEffect(() => {
    initializeBiometricAuth();
    setupGestureHandlers();
    
    return () => {
      // Cleanup gesture handlers
      gestureService.removeCallback(handleGesture);
    };
  }, []);

  const initializeBiometricAuth = async () => {
    try {
      // Check if device supports biometric authentication
      const hasHardware = await LocalAuthentication.hasHardwareAsync();
      if (!hasHardware) {
        await voiceService.speak(
          "Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ x√°c th·ª±c sinh tr·∫Øc h·ªçc. Vui l√≤ng s·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p kh√°c."
        );
        setIsSupported(false);
        return;
      }

      // Check if biometric records are enrolled
      const isEnrolled = await LocalAuthentication.isEnrolledAsync();
      if (!isEnrolled) {
        await voiceService.speak(
          "Ch∆∞a thi·∫øt l·∫≠p x√°c th·ª±c sinh tr·∫Øc h·ªçc. Vui l√≤ng thi·∫øt l·∫≠p trong c√†i ƒë·∫∑t thi·∫øt b·ªã."
        );
        setIsSupported(false);
        return;
      }

      // Get supported authentication types
      const supportedTypes = await LocalAuthentication.supportedAuthenticationTypesAsync();
      let authTypeText = '';
      
      if (supportedTypes.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION)) {
        authTypeText = 'Face ID';
        setBiometricType('Face ID');
      } else if (supportedTypes.includes(LocalAuthentication.AuthenticationType.FINGERPRINT)) {
        authTypeText = 'v√¢n tay';
        setBiometricType('Fingerprint');
      } else if (supportedTypes.includes(LocalAuthentication.AuthenticationType.IRIS)) {
        authTypeText = 'm·ªëng m·∫Øt';
        setBiometricType('Iris');
      }

      setIsSupported(true);
      
      // Announce welcome and authentication method
      await voiceService.announceWelcome();
      
      // Auto-start authentication after announcement
      setTimeout(() => {
        startAuthentication();
      }, 2000);
      
    } catch (error) {
      console.error('Biometric initialization error:', error);
      await voiceService.announceGenericError();
      setIsSupported(false);
    }
  };

  const setupGestureHandlers = () => {
    gestureService.addCallback(handleGesture);
  };

  const handleGesture = async (gestureType: GestureType) => {
    switch (gestureType) {
      case 'double-swipe-down':
        // Retry authentication
        await voiceService.speak("Th·ª≠ l·∫°i x√°c th·ª±c");
        startAuthentication();
        break;
      case 'long-press':
        // Alternative authentication or exit
        await voiceService.speak("Tho√°t ·ª©ng d·ª•ng");
        // Handle exit logic here
        break;
    }
  };

  const startAuthentication = async () => {
    if (!isSupported || isAuthenticating) return;

    setIsAuthenticating(true);
    
    try {
      await voiceService.speak(`Vui l√≤ng ƒë·∫∑t ${biometricType === 'Face ID' ? 'm·∫∑t' : 'ng√≥n tay'} ƒë·ªÉ x√°c th·ª±c`);
      
      const result = await LocalAuthentication.authenticateAsync({
        promptMessage: 'X√°c th·ª±c ƒë·ªÉ ti·∫øp t·ª•c - S·ª≠ d·ª•ng sinh tr·∫Øc h·ªçc ƒë·ªÉ truy c·∫≠p VisionAid',
        fallbackLabel: 'S·ª≠ d·ª•ng m·∫≠t kh·∫©u',
        cancelLabel: 'H·ªßy',
        disableDeviceFallback: false,
      });

      if (result.success) {
        await voiceService.announceAuthSuccess();
        setTimeout(() => {
          onAuthSuccess();
        }, 1000);
      } else {
        await voiceService.announceAuthFailed();
        
        if (result.error === 'user_cancel') {
          await voiceService.speak("ƒê√£ h·ªßy x√°c th·ª±c. Vu·ªët hai l·∫ßn xu·ªëng ƒë·ªÉ th·ª≠ l·∫°i.");
        } else if (result.error === 'user_fallback') {
          // Handle fallback authentication
          await voiceService.speak("Chuy·ªÉn sang x√°c th·ª±c thay th·∫ø");
          handleFallbackAuth();
        } else {
          await voiceService.speak("X√°c th·ª±c th·∫•t b·∫°i. Vu·ªët hai l·∫ßn xu·ªëng ƒë·ªÉ th·ª≠ l·∫°i.");
        }
        
        if (onAuthFail) {
          onAuthFail();
        }
      }
    } catch (error) {
      console.error('Authentication error:', error);
      await voiceService.announceGenericError();
      if (onAuthFail) {
        onAuthFail();
      }
    } finally {
      setIsAuthenticating(false);
    }
  };

  const handleFallbackAuth = () => {
    // This could navigate to a traditional login form
    // For now, just show an alert
    Alert.alert(
      "X√°c th·ª±c thay th·∫ø",
      "T√≠nh nƒÉng ƒëƒÉng nh·∫≠p b·∫±ng m·∫≠t kh·∫©u s·∫Ω ƒë∆∞·ª£c th√™m v√†o phi√™n b·∫£n ti·∫øp theo.",
      [
        {
          text: "Th·ª≠ l·∫°i sinh tr·∫Øc h·ªçc",
          onPress: () => startAuthentication()
        }
      ]
    );
  };

  const renderFallbackContent = () => {
    if (!isSupported) {
      return (
        <View style={styles.fallbackContainer}>
          <Text style={styles.errorText}>
            Thi·∫øt b·ªã kh√¥ng h·ªó tr·ª£ x√°c th·ª±c sinh tr·∫Øc h·ªçc
          </Text>
          <TouchableOpacity 
            style={styles.fallbackButton}
            onPress={handleFallbackAuth}
            accessible={true}
            accessibilityLabel="ƒêƒÉng nh·∫≠p b·∫±ng m·∫≠t kh·∫©u"
          >
            <Text style={styles.fallbackButtonText}>
              ƒêƒÉng nh·∫≠p kh√°c
            </Text>
          </TouchableOpacity>
        </View>
      );
    }

    return null;
  };

  return (
    <SafeAreaView style={styles.container}>
      <PanGestureHandler onGestureEvent={gestureService.handlePanGesture}>
        <View style={styles.content}>
          <View style={styles.logoContainer}>
            <Text style={styles.logoText}>üëÅÔ∏è‚Äçüó®Ô∏è</Text>
            <Text style={styles.appName}>VisionAid</Text>
            <Text style={styles.subtitle}>H·ªó tr·ª£ ng∆∞·ªùi khi·∫øm th·ªã</Text>
          </View>

          <View style={styles.authContainer}>
            {isSupported ? (
              <>
                <Text style={styles.authTitle}>X√°c th·ª±c ƒë·ªÉ ti·∫øp t·ª•c</Text>
                <Text style={styles.authSubtitle}>
                  S·ª≠ d·ª•ng {biometricType === 'Face ID' ? 'Face ID' : 'v√¢n tay'} ƒë·ªÉ ƒëƒÉng nh·∫≠p
                </Text>
                
                <TouchableOpacity
                  style={[styles.authButton, isAuthenticating && styles.authButtonDisabled]}
                  onPress={startAuthentication}
                  disabled={isAuthenticating}
                  accessible={true}
                  accessibilityLabel={`X√°c th·ª±c b·∫±ng ${biometricType}`}
                >
                  <Text style={styles.authIcon}>
                    {biometricType === 'Face ID' ? 'üîì' : 'üëÜ'}
                  </Text>
                  <Text style={styles.authButtonText}>
                    {isAuthenticating ? 'ƒêang x√°c th·ª±c...' : 'Ch·∫°m ƒë·ªÉ x√°c th·ª±c'}
                  </Text>
                </TouchableOpacity>

                <Text style={styles.instructionText}>
                  Vu·ªët hai l·∫ßn xu·ªëng ƒë·ªÉ th·ª≠ l·∫°i{'\n'}
                  Ch·∫°m gi·ªØ ƒë·ªÉ tho√°t
                </Text>
              </>
            ) : (
              renderFallbackContent()
            )}
          </View>
        </View>
      </PanGestureHandler>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000000',
  },
  content: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 60,
  },
  logoText: {
    fontSize: 80,
    marginBottom: 16,
  },
  appName: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#ffffff',
    marginBottom: 8,
  },
  subtitle: {
    fontSize: 16,
    color: '#888888',
    textAlign: 'center',
  },
  authContainer: {
    alignItems: 'center',
    width: '100%',
  },
  authTitle: {
    fontSize: 24,
    fontWeight: '600',
    color: '#ffffff',
    marginBottom: 8,
    textAlign: 'center',
  },
  authSubtitle: {
    fontSize: 16,
    color: '#cccccc',
    marginBottom: 40,
    textAlign: 'center',
  },
  authButton: {
    backgroundColor: '#2563eb',
    borderRadius: 16,
    paddingVertical: 20,
    paddingHorizontal: 40,
    alignItems: 'center',
    marginBottom: 32,
    minWidth: 200,
  },
  authButtonDisabled: {
    backgroundColor: '#1e40af',
    opacity: 0.7,
  },
  authIcon: {
    fontSize: 32,
    marginBottom: 8,
  },
  authButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  instructionText: {
    fontSize: 14,
    color: '#888888',
    textAlign: 'center',
    lineHeight: 20,
  },
  fallbackContainer: {
    alignItems: 'center',
  },
  errorText: {
    fontSize: 16,
    color: '#ef4444',
    textAlign: 'center',
    marginBottom: 24,
  },
  fallbackButton: {
    backgroundColor: '#374151',
    borderRadius: 12,
    paddingVertical: 16,
    paddingHorizontal: 32,
  },
  fallbackButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '500',
  },
});
