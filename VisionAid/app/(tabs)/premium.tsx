import React, { useEffect, useState } from "react";
import { View, Text, StyleSheet, Alert, SafeAreaView, StatusBar, ScrollView } from "react-native";
import { useRouter } from "expo-router";
import { PanGestureHandler } from "react-native-gesture-handler";
import { voiceService } from "../../src/services/VoiceServiceAudio";
import { gestureService, GestureType } from "../../src/services/GestureService";

export default function PremiumScreen() {
  const router = useRouter();
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);

  useEffect(() => {
    initializePremiumScreen();
    setupGestureHandlers();
    
    return () => {
      gestureService.removeCallback(handleGesture);
    };
  }, []);

  const initializePremiumScreen = async () => {
    await voiceService.announcePremiumMode();
  };

  const setupGestureHandlers = () => {
    gestureService.addCallback(handleGesture);
  };

  const handleGesture = async (gestureType: GestureType) => {
    switch (gestureType) {
      case 'double-swipe-down':
        await voiceService.announceGestureDetected('home');
        setTimeout(() => {
          router.back();
        }, 500);
        break;
        
      case 'double-swipe-left':
        await voiceService.announceGestureDetected('camera');
        setTimeout(() => {
          router.push("/CameraScreen");
        }, 500);
        break;
        
      case 'double-swipe-right':
        await voiceService.announceGestureDetected('gps');
        setTimeout(() => {
          router.push("/(tabs)/gps");
        }, 500);
        break;
        
      case 'long-press':
        if (selectedPlan) {
          await handleUpgrade(selectedPlan);
        } else {
          await voiceService.speak("Vui l√≤ng ch·ªçn g√≥i th√†nh vi√™n tr∆∞·ªõc. Ch·∫°m v√†o m·ªôt trong c√°c g√≥i b√™n d∆∞·ªõi.");
        }
        break;
        
      default:
        await voiceService.announceGestureNotRecognized();
        break;
    }
  };

  const handleUpgrade = async (plan: string) => {
    await voiceService.speak(`ƒêang n√¢ng c·∫•p l√™n g√≥i ${plan}...`);
    
    // Simulate upgrade process
    setTimeout(async () => {
      await voiceService.speak("N√¢ng c·∫•p th√†nh c√¥ng! C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng VisionAid Premium.");
    }, 2000);
  };

  const selectPlan = async (plan: string, price: string, features: string) => {
    setSelectedPlan(plan);
    await voiceService.speak(`ƒê√£ ch·ªçn g√≥i ${plan} v·ªõi gi√° ${price}. ${features}. Ch·∫°m gi·ªØ ƒë·ªÉ x√°c nh·∫≠n n√¢ng c·∫•p.`);
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar barStyle="dark-content" backgroundColor="#fff" />
      
      <PanGestureHandler onGestureEvent={gestureService.handlePanGesture}>
        <View style={styles.container}>
          {/* Header */}
          <View style={styles.header}>
            <Text style={styles.headerTitle}>‚≠ê Premium</Text>
            <Text style={styles.headerSubtitle}>N√¢ng c·∫•p tr·∫£i nghi·ªám VisionAid</Text>
          </View>

          <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
            {/* Premium Features */}
            <View style={styles.featuresContainer}>
              <Text style={styles.sectionTitle}>T√≠nh nƒÉng Premium</Text>
              
              <View style={styles.featureItem}>
                <Text style={styles.featureIcon}>üöÄ</Text>
                <View style={styles.featureText}>
                  <Text style={styles.featureTitle}>X·ª≠ l√Ω ·∫£nh nhanh h∆°n</Text>
                  <Text style={styles.featureDescription}>Ph√¢n t√≠ch h√¨nh ·∫£nh v·ªõi t·ªëc ƒë·ªô g·∫•p 3 l·∫ßn</Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <Text style={styles.featureIcon}>üéØ</Text>
                <View style={styles.featureText}>
                  <Text style={styles.featureTitle}>ƒê·ªô ch√≠nh x√°c cao</Text>
                  <Text style={styles.featureDescription}>AI n√¢ng cao v·ªõi ƒë·ªô ch√≠nh x√°c 99%</Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <Text style={styles.featureIcon}>üîä</Text>
                <View style={styles.featureText}>
                  <Text style={styles.featureTitle}>Nhi·ªÅu gi·ªçng ƒë·ªçc</Text>
                  <Text style={styles.featureDescription}>L·ª±a ch·ªçn t·ª´ 10+ gi·ªçng ƒë·ªçc kh√°c nhau</Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <Text style={styles.featureIcon}>üíæ</Text>
                <View style={styles.featureText}>
                  <Text style={styles.featureTitle}>L∆∞u tr·ªØ kh√¥ng gi·ªõi h·∫°n</Text>
                  <Text style={styles.featureDescription}>L∆∞u v√† qu·∫£n l√Ω l·ªãch s·ª≠ ph√¢n t√≠ch</Text>
                </View>
              </View>

              <View style={styles.featureItem}>
                <Text style={styles.featureIcon}>üìû</Text>
                <View style={styles.featureText}>
                  <Text style={styles.featureTitle}>H·ªó tr·ª£ 24/7</Text>
                  <Text style={styles.featureDescription}>H·ªó tr·ª£ k·ªπ thu·∫≠t ∆∞u ti√™n m·ªçi l√∫c</Text>
                </View>
              </View>
            </View>

            {/* Pricing Plans */}
            <View style={styles.plansContainer}>
              <Text style={styles.sectionTitle}>Ch·ªçn g√≥i ph√π h·ª£p</Text>
              
              {/* Monthly Plan */}
              <View 
                style={[styles.planCard, selectedPlan === 'Th√°ng' && styles.selectedPlan]}
                onTouchEnd={() => selectPlan('Th√°ng', '99.000 ƒë·ªìng m·ªói th√°ng', 'Ph√π h·ª£p cho ng∆∞·ªùi d√πng th·ª≠ nghi·ªám')}
              >
                <View style={styles.planHeader}>
                  <Text style={styles.planName}>G√≥i Th√°ng</Text>
                  <Text style={styles.planPrice}>99.000ƒë</Text>
                  <Text style={styles.planPeriod}>/th√°ng</Text>
                </View>
                <Text style={styles.planDescription}>
                  Ph√π h·ª£p cho ng∆∞·ªùi d√πng mu·ªën tr·∫£i nghi·ªám
                </Text>
              </View>

              {/* Yearly Plan */}
              <View 
                style={[styles.planCard, styles.popularPlan, selectedPlan === 'NƒÉm' && styles.selectedPlan]}
                onTouchEnd={() => selectPlan('NƒÉm', '990.000 ƒë·ªìng m·ªói nƒÉm', 'Ti·∫øt ki·ªám 2 th√°ng so v·ªõi g√≥i th√°ng')}
              >
                <View style={styles.popularBadge}>
                  <Text style={styles.popularText}>PH·ªî BI·∫æN</Text>
                </View>
                <View style={styles.planHeader}>
                  <Text style={styles.planName}>G√≥i NƒÉm</Text>
                  <Text style={styles.planPrice}>990.000ƒë</Text>
                  <Text style={styles.planPeriod}>/nƒÉm</Text>
                </View>
                <Text style={styles.planDescription}>
                  Ti·∫øt ki·ªám 20% - Ph√π h·ª£p cho ng∆∞·ªùi d√πng th∆∞·ªùng xuy√™n
                </Text>
              </View>

              {/* Lifetime Plan */}
              <View 
                style={[styles.planCard, selectedPlan === 'Tr·ªçn ƒë·ªùi' && styles.selectedPlan]}
                onTouchEnd={() => selectPlan('Tr·ªçn ƒë·ªùi', '2.990.000 ƒë·ªìng m·ªôt l·∫ßn', 'S·ª≠ d·ª•ng vƒ©nh vi·ªÖn, kh√¥ng c·∫ßn gia h·∫°n')}
              >
                <View style={styles.planHeader}>
                  <Text style={styles.planName}>G√≥i Tr·ªçn ƒê·ªùi</Text>
                  <Text style={styles.planPrice}>2.990.000ƒë</Text>
                  <Text style={styles.planPeriod}>m·ªôt l·∫ßn</Text>
                </View>
                <Text style={styles.planDescription}>
                  S·ª≠ d·ª•ng vƒ©nh vi·ªÖn - ƒê·∫ßu t∆∞ d√†i h·∫°n t·ªët nh·∫•t
                </Text>
              </View>
            </View>

            {/* Instructions */}
            <View style={styles.instructionsContainer}>
              <Text style={styles.instructionsTitle}>C√°ch s·ª≠ d·ª•ng:</Text>
              <Text style={styles.instructionItem}>‚Ä¢ Ch·∫°m v√†o g√≥i ƒë·ªÉ ch·ªçn</Text>
              <Text style={styles.instructionItem}>‚Ä¢ Ch·∫°m gi·ªØ ƒë·ªÉ x√°c nh·∫≠n n√¢ng c·∫•p</Text>
              <Text style={styles.instructionItem}>‚Ä¢ Vu·ªët 2 l·∫ßn xu·ªëng: V·ªÅ trang ch√≠nh</Text>
              <Text style={styles.instructionItem}>‚Ä¢ Vu·ªët 2 l·∫ßn tr√°i: M·ªü Camera</Text>
              <Text style={styles.instructionItem}>‚Ä¢ Vu·ªët 2 l·∫ßn ph·∫£i: M·ªü GPS</Text>
            </View>
          </ScrollView>
        </View>
      </PanGestureHandler>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: "#fff",
  },
  container: {
    flex: 1,
    backgroundColor: "#f8f9fa",
  },
  header: {
    backgroundColor: "#f59e0b",
    paddingHorizontal: 20,
    paddingVertical: 24,
    alignItems: "center",
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: "700",
    color: "#fff",
    marginBottom: 4,
  },
  headerSubtitle: {
    fontSize: 16,
    color: "#fef3c7",
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
  },
  featuresContainer: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    marginTop: 20,
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "600",
    color: "#1f2937",
    marginBottom: 16,
  },
  featureItem: {
    flexDirection: "row",
    alignItems: "center",
    marginBottom: 16,
  },
  featureIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  featureText: {
    flex: 1,
  },
  featureTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#1f2937",
    marginBottom: 2,
  },
  featureDescription: {
    fontSize: 14,
    color: "#6b7280",
  },
  plansContainer: {
    marginBottom: 20,
  },
  planCard: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    marginBottom: 12,
    borderWidth: 2,
    borderColor: "#e5e7eb",
    position: "relative",
  },
  selectedPlan: {
    borderColor: "#f59e0b",
    backgroundColor: "#fffbeb",
  },
  popularPlan: {
    borderColor: "#f59e0b",
  },
  popularBadge: {
    position: "absolute",
    top: -8,
    right: 20,
    backgroundColor: "#f59e0b",
    paddingHorizontal: 12,
    paddingVertical: 4,
    borderRadius: 12,
  },
  popularText: {
    fontSize: 10,
    fontWeight: "700",
    color: "#fff",
  },
  planHeader: {
    alignItems: "center",
    marginBottom: 8,
  },
  planName: {
    fontSize: 18,
    fontWeight: "600",
    color: "#1f2937",
    marginBottom: 4,
  },
  planPrice: {
    fontSize: 24,
    fontWeight: "700",
    color: "#f59e0b",
  },
  planPeriod: {
    fontSize: 14,
    color: "#6b7280",
  },
  planDescription: {
    fontSize: 14,
    color: "#6b7280",
    textAlign: "center",
  },
  instructionsContainer: {
    backgroundColor: "#fff",
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
  },
  instructionsTitle: {
    fontSize: 16,
    fontWeight: "600",
    color: "#1f2937",
    marginBottom: 12,
  },
  instructionItem: {
    fontSize: 14,
    color: "#6b7280",
    marginBottom: 8,
    lineHeight: 20,
  },
});
